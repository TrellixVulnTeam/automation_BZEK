import xlwings as xw
import atexit
import os

from functools import wraps
from datetime import datetime

from .filemanager import default_filename, exists

def headers(writer):
    header = 'Vac(rms) Freq(Hz) Vin(rms) Iin(mA) Pin(W) PF %THD Vo(V) Io(mA) Po(W) %Vreg Efficiency'.split(' ')
    writer.write('Date', cell='E1')
    writer.write(datetime.now().strftime('%b %d,%Y'), cell='F1')
    writer.write('Start', cell='E2')
    writer.write(datetime.now().strftime('%I:%M %p').lstrip('0'), cell='F2')
    writer.write('Finish', cell='E3')
    writer.merge_cells('E4:F4')
    writer.merge_cells('G4:K4')
    writer.merge_cells('L4:O4')
    writer.write('Input', cell='E4')
    writer.write('Input Measurement', cell='G4')
    writer.write('Output Measurement', cell='L4')
    writer.write(header, cell='E5')
    writer.update_cell(cell='E6')
    writer.save()

def footers(writer):
    writer.write(datetime.now().strftime('%I:%M %p').lstrip('0'), cell='F3')

def next_line(func):
    @wraps(func)
    def wrapped(*args, **kwargs):
        response = func(*args, **kwargs)
        args[0].cell['row'] += 1
        return response
    return wrapped

class Plotter:
    pass

class ExcelWriter:
    def __init__(self, filename, origin='A1', path=os.getcwd(), auto_close=True):
        print(path)
        self.file = f'{path}\\{filename}'
        self.origin = origin
        self.create_book()

        if auto_close:
            atexit.register(self.close)

    def delete_sheet(self, name):
        for sheet in self.wb.sheets:
            if name in sheet.name:
                sheet.delete()

    def create_sheet(self, name=default_filename()):
        if self.sheet_exists(name):
            self.delete_sheet(name)

        self.wb.sheets.add(name=name)
        self.cell = {'row': xw.Range(self.origin).row, 'column': xw.Range(self.origin).column}

    def rename_sheet(self, name, new_name=default_filename()):
        for sheet in self.wb.sheets:
            if name == sheet.name:
                sheet.name = new_name

    def create_book(self):
        if exists(self.file):
            self.wb = xw.Book(self.file)
            self.create_sheet()
        else:
            self.wb = xw.Book()
            self.rename_sheet('Sheet1')
            self.delete_sheet('Sheet2')
            self.delete_sheet('Sheet3')

        self.cell = {'row': xw.Range(self.origin).row, 'column': xw.Range(self.origin).column}

    def save(self):
        self.wb.save(self.file)

    def close(self):
        self.wb.close()

    def update_cell(self, cell=None, reset=False):
        if reset:
            self.cell = {'row': xw.Range(self.origin).row, 'column': xw.Range(self.origin).column}
        else:
            self.cell = {'row': xw.Range(cell).row, 'column': xw.Range(cell).column}

    def merge_cells(self, cells):
        sht = self.wb.sheets.active
        sht.range(cells).api.merge()

    @next_line
    def write(self, data, cell=None):
        sht = self.wb.sheets.active
        if cell:
            self.update_cell(cell)

        row = self.cell['row']
        col = self.cell['column']
        sht.range(row, col).value = data

    def __repr__(self):
        return f'ExcelWriter(filename={filename}, path={path})'

    def sheet_exists(self, name):
        for sheet in self.wb.sheets:
            if name == sheet.name:
                return True
        return False

if __name__ == '__main__':
    pass
